# this is meant to be invoked via jenkins and assumes that jenkins has
# cloned/updated the source

# arguments, specified via "-D"
#   -DVERBOSITY=<0-5>
#   -DDASHSUBMIT=<TRUE|FALSE>   # mostly for debugging to avoid cdash submission

# verbosity level
#   0 - no specific screen output (default)
#   5 - all screen output available
if(NOT VERBOSITY)
  set(VERBOSITY 0)
endif()

# default TRUE
if(NOT DEFINED DASHSUBMIT)
  set(DASHSUBMIT TRUE)
endif()

# macro to list the contents of a specified subdirectory
#    dirname - full spec for directory to list
#    result  - return value containing cmake list of subdirectories within
#              "dirname"
macro(SUBDIRLIST dirname result)
  file(GLOB children RELATIVE ${dirname} ${dirname}/*)
  set(dirlist "")
  foreach(child ${children})
    if(IS_DIRECTORY ${dirname}/${child})
      list(APPEND dirlist ${child})
    endif()
  endforeach()
  set(${result} ${dirlist})
endmacro()

# macro to read the custom xyce test results XML file and convert it
# to a format consistent with ctest for a unified submission. at
# present this just replaces the "BuildStamp" in the custom test
# results XML file with the one generated by ctest
#    inputfn - name of the custom xyce results file
#    subdirname - name of the subdirectory which ctest generated. this
#                 corresponds to the BuildStamp
#    track - the test track as used by ctest, one of Experimental,
#            Nightly, Weekly or Continuous
macro(CONVERTTESTXML inputfn subdirname track)
  file(STRINGS ${inputfn} lines_list)
  foreach(fline ${lines_list})
    if(${fline} MATCHES "BuildStamp=\"(.*)\"")
      string(REGEX REPLACE "(.*BuildStamp=)\"(.*)\""  "\\1\"${subdirname}-${track}\"" outfline ${fline})
      list(APPEND new_line_list ${outfline})
    else()
      list(APPEND new_line_list ${fline})
    endif()
  endforeach()

  # convert the cmake list to a unified string with new lines
  string(REPLACE ";" "\n" out_contents "${new_line_list}")
  file(WRITE "$ENV{WORKSPACE}/build/Testing/${subdirname}/Test.xml" ${out_contents})
endmacro()

# WORKSPACE is an environment variable set by jenkins
set(CTEST_SOURCE_DIRECTORY "$ENV{WORKSPACE}/source/Xyce")

# the specified directory must exist or ctest with error out
set(CTEST_BINARY_DIRECTORY "$ENV{WORKSPACE}/build")

# this should probably be a variable in the environment or passed in,
# but for now it's hard-coded to 1am
set(CTEST_NIGHTLY_START_TIME "01:00:00 MDT")

# use the "hostname" command for use as the CTEST_SITE variable, which
# is used in the "Site" column on the dashboard
find_program(HNAME NAMES hostname)
execute_process(COMMAND "${HNAME}"
  OUTPUT_VARIABLE CTEST_SITE
  OUTPUT_STRIP_TRAILING_WHITESPACE)

# find the custom xyce regression testing script
find_program(XYCE_REGR_SCRIPT run_xyce_regression
  HINTS $ENV{WORKSPACE}/tests/Xyce_Regression/TestScripts
  REQUIRED)

# find the custom perl script to create the results XML file
find_program(XYCE_CDASH_GEN summary-dart-nosubmit.pl
  HINTS $ENV{WORKSPACE}/Scripts/reporting
  REQUIRED)

# this is used as the "Build Name" column on the dashboard
set(CTEST_BUILD_NAME "$ENV{MYBUILDNAME}")

# used for invocation of parallel make
if(DEFINED ENV{NUM_JOBS})
  set(CTEST_BUILD_FLAGS "-j$ENV{NUM_JOBS}")
else()
  set(CTEST_BUILD_FLAGS "-j8")
endif()

set(CTEST_CMAKE_GENERATOR "Unix Makefiles")

if($ENV{TESTSET} STREQUAL "Nightly")
  set(MODEL "Nightly")
  set(TESTGROUP "Nightly")
elseif($ENV{TESTSET} STREQUAL "Weekly")
  set(MODEL "Nightly")
  set(TESTGROUP "Weekly")
else()
  set(MODEL "Experimental")
  set(TESTGROUP "Experimental")
endif()

# the following are likely pretty invariant
set(CTEST_PROJECT_NAME "Xyce")
set(CTEST_DROP_METHOD "http")
set(CTEST_DROP_SITE "joseki-srn.sandia.gov/CDash")
set(CTEST_DROP_LOCATION "/submit.php?project=Xyce")

# begin ctest procedures. MODEL should be one of Nighlty, Weekly, Continuous or
# Experimental. this can use custom categories via the GROUP option to
# ctest_start() if desired
ctest_start(${MODEL} GROUP ${TESTGROUP})

# this runs cmake on xyce
ctest_configure()

# this runs make
ctest_build()

# run the custom xyce regression test script
message("executing custom xyce regression test script, ${XYCE_REGR_SCRIPT}...")
execute_process(COMMAND ${XYCE_REGR_SCRIPT}
  --output=$ENV{WORKSPACE}/build/Xyce_Regression
  --xyce_test=$ENV{WORKSPACE}/tests/Xyce_Regression
  --xyce_verify=$ENV{WORKSPACE}/tests/Xyce_Regression/TestScripts/xyce_verify.pl
  --ignoreparsewarnings
  --taglist=+serial?klu?weekly?nightly-verbose?noverbose?nonfree?rad?qaspr?athena?fft?stokhos?amesos2basker?amesos2klu2?xdm+library
  --resultfile=$ENV{WORKSPACE}/build/regr_test_results_all
  $ENV{WORKSPACE}/build/src/Xyce
  OUTPUT_VARIABLE regrOut
  ERROR_VARIABLE regrOut
  RESULT_VARIABLE xyce_reg_result)

if(VERBOSITY GREATER 3)
  message("[VERB4]: exit status of regression script ${XYCE_REGR_SCRIPT}: ${xyce_reg_result}")
  message("[VERB4]: screen output from regression script ${XYCE_REGR_SCRIPT}: ${regrOut}")
endif()

# run the perl script to summarize results for submission to the dashboard
if(VERBOSITY GREATER 1)
  message("[VERB2]: XYCE_CDASH_GEN = ${XYCE_CDASH_GEN}")
  message("[VERB2]:   CTEST_SITE = ${CTEST_SITE}")
  message("[VERB2]:   MYBUILDNAME = $ENV{MYBUILDNAME}")
  message("[VERB2]:   branch = $ENV{branch}")
  message("[VERB2]:   output file name = $ENV{WORKSPACE}/build/regr_test_results_all")
  message("[VERB2]:   TESTSET = $ENV{TESTSET}")
endif()
message("executing custom xyce regression report script, ${XYCE_CDASH_GEN}")
execute_process(COMMAND ${XYCE_CDASH_GEN}
  ${CTEST_SITE}
  $ENV{MYBUILDNAME}
  $ENV{branch}
  $ENV{WORKSPACE}/build/regr_test_results_all
  $ENV{TESTSET}
  OUTPUT_VARIABLE submitOut
  ERROR_VARIABLE submitOut
  RESULT_VARIABLE xyce_cdash_gen_result)
if(VERBOSITY GREATER 3)
  message("[VERB4]: exit status of script ${XYCE_CDASH_GEN}: ${xyce_cdash_gen_result}")
  message("[VERB4]: screen output from script ${XYCE_CDASH_GEN}: ${submitOut}")
endif()

# figure out the directory for the dashboard submission and copy the
# custom results file into it
SUBDIRLIST($ENV{WORKSPACE}/build/Testing TESTSUBDIRS)
if(VERBOSITY GREATER 4)
  message("[VERB5]: \"Testing\" subdirectory list: ${TESTSUBDIRS}")
endif()

# this will likely fail if the "Testing" subdirectory contains more
# than just "Temporary" and the directory with the build ID as it's
# name, usually given by <yyyymmdd-timestamp>
foreach(dir ${TESTSUBDIRS})
  if(NOT ${dir} STREQUAL "Temporary")
    set(submissionDir ${dir})
  endif()
endforeach()
CONVERTTESTXML($ENV{WORKSPACE}/build/regr_test_results_all.xml
  ${submissionDir}
  $ENV{TESTSET})

# submit results to the dashboard
if(DASHSUBMIT)
  ctest_submit(RETRY_COUNT 10 RETRY_DELAY 30)
endif()
